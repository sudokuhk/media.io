---
layout: post
title: 写给自己
date: 2018-08-01 01:38:00 AM
description: 
tags: 
---

>懦怯囚禁人的灵魂，希望可以感受自由。强者自救，圣者渡人。

&#160; &#160; &#160; &#160;从2011年毕业工作以来，一直在C/C++坚持着，并且越走越远。从大学学会了写“Hello world”开始，到毕业对工程的小白，到现在对Linux下程序有一定的了解，持续不断的学习，进步，充实自己。

&#160; &#160; &#160; &#160;第一份工作是在一家台湾半导体公司，做嵌入式软件工程师，开始接触Linux内核、驱动，Flash烧录器等方面的知识。这个工作，对我最大的帮助，是让我开始有了工程意识，帮我走进Linux这个领域。当时，为了从0开始构建Linux系统，沿着网上的关于LFS（Linux From Scratch）的帖子，花了大半个月，在我的台式机的vmware虚拟机上搞定，那种成就感不言而喻。虽然不知道学了会了什么，只是各种编译，不断的重复的编译，从gcc，到glibc，到busybox。然后开始阅读Linux内核代码，包括驱动模块、进程调度、字符设备驱动、块驱动、USB驱动等。也形成了一个经常阅读开源代码的习惯，在后面的几年工作时间内，熟悉了nginx、redis、memcached、libevent等开源代码，甚至会好奇的去看glibc和重复的阅读linux内核代码。形成了开源C代码的编码风格。

&#160; &#160; &#160; &#160;离开第一个工作后，当时为了给自己一个好的契机和平台，在广州的七八月份的盛暑中，前前后后八轮面试，终于拿到了YY的offer，进入YY这个大平台。也是在这个环境下，开始接触互联网，真正意义上的做一个C++工程师。开始接触信令和媒体，保有一颗不满足的持续学习的态度和心情，对媒体和信令有了一定的了解，但是仅仅也只是皮毛，并没有想过要在这个领域有什么作为，也对IM服务器，媒体服务器一知半解。在媒体组的日子，为了证实了自己是有能力胜任这份工作，只有不断的学习，获得身边的同事和领导的认可。也感谢这个机会，让我的技术有了一个新的起点。

&#160; &#160; &#160; &#160;紧接着，由于一些原因，进入电信行业工作。由于前面四年多工作的经验的积累，技术的沉淀，对电信业务的上手比较快，解决问题速度也比较快，导致工作的空闲时间比较多。一方面由于无聊，一方面也是好奇整个BOSS系统是如何运行的，开始阅读系统框架的代码，对系统架构、进程调度和启动、任务分配、流程等有一定的了解。由于电信业务的特殊性，导致有一大块静态数据是每个进程都需要访问的，里面的数据大概就是一些套餐信息，数据量大概在十几G左右，也存在被更新的可能。系统的实现方式是每一台机器创建一大块共享内存，所有业务进程共同访问共享内存获取想要的数据，BOSS系统每天凌晨会自动从oracle数据库里加载更新。当时遇到几个问题：

&#160; &#160; &#160; &#160;1. 业务进程启动时，映射共享内存失败，导致进程因为无法获取共享内存，进程在业务层面上启动失败，进程退出。

&#160; &#160; &#160; &#160;2. 共享内存里面的数据结构是哈希表、树等数据结构，在更新共享内存时，速度太慢，耗时往往需要1-2小时才能完成10G数据的更新。

&#160; &#160; &#160; &#160;时间充裕又好奇，所以，开始寻找第一个问题的原因。阅读glibc的代码，研究进程怎么自举，到执行main函数；阅读Linux内核代码，研究程序如何从./a.out开始执行，到执行__libc_start_main函数；阅读Linux内核代码，看共享内存映射机制，虚拟内存分配机制等，终于找到了问题的答案。然后，跨过年到2016年初，领导说想优化下共享内存加载这块，想到了我，问我是否有兴趣，愿意参与。机会也是挑战。接下任务后，花了一个月的时间，完成性能分析、方案设计、编码、测试、最终性能参数对比。达到每次加载刷新共享内存，只需要几分钟，大量节省了BOSS系统的交割时间。不过，带着点遗憾的是，完成这个优化项目后，我就离开了。到现在我还时不时的问前同事，是否稳定？当然，答案还是很让人欢喜的。

&#160; &#160; &#160; &#160;计划赶不上变化，该你的跑都跑不到，辗转，又回到了互联网行业，重新操刀开始媒体流技术方向上。这一次，开始深度学习媒体知识，从一知半解的皮毛，到自己从0开始设计音视频SDK，目前也在持续设计开发，先后完成：

&#160; &#160; &#160; &#160;1. RTMP协议根据文档自己开发；

&#160; &#160; &#160; &#160;2. 使用非阻塞io实现RTMP的网络推流和拉流，抛开librtmp的阻塞模式；

&#160; &#160; &#160; &#160;3. 使用C++实现跨平台的Andriod/iOS/Windows的视频采集和音频采集RTMP推流和拉流播放；

&#160; &#160; &#160; &#160;4. 实现视频播放器，播放RTMP视频；

&#160; &#160; &#160; &#160;5. 研究UDP传输；待开发UDP传输声音和视频流；

&#160; &#160; &#160; &#160;这期间，无意间接触了腾讯开源的phxrpc和libco协程库，觉得设计的甚是简单精巧。然后就利用闲暇时间，重复造了个轮子，自己模仿写了一个[协程库](https://github.com/sudokuhk/net-utility)，同时基于我自己实现的协程库，实现了http协议，模仿了[zimg](https://github.com/buaazp/zimg)实现了一个类似的[功能](https://github.com/sudokuhk/net-utility/tree/master/uimg)。

>苟有恒，何必三更眠五更起；最无益，莫过于一日曝十日寒。

&#160; &#160; &#160; &#160;这些年，专注于C/C++，对Linux环境下程序的编译、运行、调度等有自己的认识；对网络、线程、协程等也有比较好的认知。对内存模型了解比较深刻。熟悉TCP的相关传输控制算法，不过对网络的系统参数调还没经过太多实战，不敢说很懂。对媒体音频视频，也有不错的积累。

&#160; &#160; &#160; &#160;总想提笔写一些东西，但是，有怯于怕耽误太多时间，不敢轻易下手。怕没时间读书，没时间锻炼，没时间做更多的事情。

&#160; &#160; &#160; &#160;最近，突然觉得，是时候需要有一些知识上的输出了，学习了那么多年，那么多知识和技术。如何更好的表达，分享出来，分享给更多的人。脑袋里也开始在想，应该按照什么样的方式、顺序、和目录结构来表达我自己想要说的知识。现在在慢慢的构思。

>知识就像一个无穷大面积的二维平面，我在平面上的某一点。学习知识就是不断的用思维的触角去占领更多的面积。当学到的知识越多时，向外扩张需要的触角也就需要越多，也就会发现，自己不懂的越来越多。
